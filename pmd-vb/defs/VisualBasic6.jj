/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. VisualBasic6.jj */
/*@egen*/options {
  JAVA_UNICODE_ESCAPE = true;
  CACHE_TOKENS = true;
  STATIC = false;
  // USER_CHAR_STREAM = true;
  JDK_VERSION = "1.5";

               
                 
                          
  // NODE_PACKAGE="net.sourceforge.pmd.lang.vb.ast";

  //DEBUG_PARSER = true;
  //DEBUG_LOOKAHEAD = true;
}


PARSER_BEGIN(VisualBasicParser)
import java.io.*;

public class VisualBasicParser/*@bgen(jjtree)*/implements VisualBasicParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTVisualBasicParserState jjtree = new JJTVisualBasicParserState();

/*@egen*/

public static void main(String args[]) throws Exception {
FileInputStream in = new FileInputStream("D:\\git\\pmd\\pmd-vb\\src\\test\\resources\\jjtest.bas");
VisualBasicParser parser = new VisualBasicParser(in);
parser.Module();
}

}

PARSER_END(VisualBasicParser)


/* keywords */
TOKEN :
{
<ACCESS: <A> <C> <C> <E> <S> <S> >
|< ADDRESSOF: <A> <D> <D> <R> <E> <S> <S> <O> <F> >
|< ALIAS: <A> <L> <I> <A> <S> >
|< AND: <A> <N> <D> >
|< ATTRIBUTE: <A> <T> <T> <R> <I> <B> <U> <T> <E> >
|< APPACTIVATE: <A> <P> <P> <A> <C> <T> <I> <V> <A> <T> <E> >
|< APPEND: <A> <P> <P> <E> <N> <D> >
|< AS: <A> <S> >
|< BEGIN: <B> <E> <G> <I> <N> >
|< BEEP: <B> <E> <E> <P> >
|< BINARY: <B> <I> <N> <A> <R> <Y> >
|< BOOLEAN: <B> <O> <O> <L> <E> <A> <N> >
|< BYVAL: <B> <Y> <V> <A> <L> >
|< BYREF: <B> <Y> <R> <E> <F> >
|< BYTE: <B> <Y> <T> <E> >
|< CALL: <C> <A> <L> <L> >
|< CASE: <C> <A> <S> <E> >
|< CHDIR: <C> <H> <D> <I> <R> >
|< CHDRIVE: <C> <H> <D> <R> <I> <V> <E> >
|< CLASS: <C> <L> <A> <S> <S> >
|< CLOSE: <C> <L> <O> <S> <E> >
|< COLLECTION: <C> <O> <L> <L> <E> <C> <T> <I> <O> <N> >
|< CONST: <C> <O> <N> <S> <T> >
|< DATE: <D> <A> <T> <E> >
|< DECLARE: <D> <E> <C> <L> <A> <R> <E> >
|< DEFBOOL: <D> <E> <F> <B> <O> <O> <L> >
|< DEFBYTE: <D> <E> <F> <B> <Y> <T> <E> >
|< DEFDATE: <D> <E> <F> <D> <A> <T> <E> >
|< DEFDBL: <D> <E> <F> <D> <B> <L> >
|< DEFDEC: <D> <E> <F> <D> <E> <C> >
|< DEFCUR: <D> <E> <F> <C> <U> <R> >
|< DEFINT: <D> <E> <F> <I> <N> <T> >
|< DEFLNG: <D> <E> <F> <L> <N> <G> >
|< DEFOBJ: <D> <E> <F> <O> <B> <J> >
|< DEFSNG: <D> <E> <F> <S> <N> <G> >
|< DEFSTR: <D> <E> <F> <S> <T> <R> >
|< DEFVAR: <D> <E> <F> <V> <A> <R> >
|< DELETESETTING: <D> <E> <L> <E> <T> <E> <S> <E> <T> <T> <I> <N> <G> >
|< DIM: <D> <I> <M> >
|< DO: <D> <O> >
|< DOUBLE: <D> <O> <U> <B> <L> <E> >
|< EACH: <E> <A> <C> <H> >
|< ELSE: <E> <L> <S> <E> >
|< ELSEIF: <E> <L> <S> <E> <I> <F> >
|< END_ENUM: <E> <N> <D> " " <E> <N> <U> <M> >
|< END_FUNCTION: <E> <N> <D> " " <F> <U> <N> <C> <T> <I> <O> <N> >
|< END_IF: <E> <N> <D> " " <I> <F> >
|< END_PROPERTY: <E> <N> <D> " " <P> <R> <O> <P> <E> <R> <T> <Y> >
|< END_SELECT: <E> <N> <D> " " <S> <E> <L> <E> <C> <T> >
|< END_SUB: <E> <N> <D> " " <S> <U> <B> >
|< END_TYPE: <E> <N> <D> " " <T> <Y> <P> <E> >
|< END_WITH: <E> <N> <D> " " <W> <I> <T> <H> >
|< END: <E> <N> <D> >
|< ENUM: <E> <N> <U> <M> >
|< EQV: <E> <Q> <V> >
|< ERASE: <E> <R> <A> <S> <E> >
|< ERROR: <E> <R> <R> <O> <R> >
|< EVENT: <E> <V> <E> <N> <T> >
|< EXIT_DO: <E> <X> <I> <T> " " <D> <O> >
|< EXIT_FOR: <E> <X> <I> <T> " " <F> <O> <R> >
|< EXIT_FUNCTION: <E> <X> <I> <T> " " <F> <U> <N> <C> <T> <I> <O> <N> >
|< EXIT_PROPERTY: <E> <X> <I> <T> " " <P> <R> <O> <P> <E> <R> <T> <Y> >
|< EXIT_SUB: <E> <X> <I> <T> " " <S> <U> <B> >
|< FALSE: <F> <A> <L> <S> <E> >
|< FILECOPY: <F> <I> <L> <E> <C> <O> <P> <Y> >
|< FRIEND: <F> <R> <I> <E> <N> <D> >
|< FOR: <F> <O> <R> >
|< FUNCTION: <F> <U> <N> <C> <T> <I> <O> <N> >
|< GET: <G> <E> <T> >
|< GLOBAL: <G> <L> <O> <B> <A> <L> >
|< GOSUB: <G> <O> <S> <U> <B> >
|< GOTO: <G> <O> <T> <O> >
|< IF: <I> <F> >
|< IMP: <I> <M> <P> >
|< IMPLEMENTS: <I> <M> <P> <L> <E> <M> <E> <N> <T> <S> >
|< IN: <I> <N> >
|< INPUT: <I> <N> <P> <U> <T> >
|< IS: <I> <S> >
|< INTEGER: <I> <N> <T> <E> <G> <E> <R> >
|< KILL: <K> <I> <L> <L> >
|< LOAD: <L> <O> <A> <D> >
|< LOCK: <L> <O> <C> <K> >
|< LONG: <L> <O> <N> <G> >
|< LOOP: <L> <O> <O> <P> >
|< LEN: <L> <E> <N> >
|< LET: <L> <E> <T> >
|< LIB: <L> <I> <B> >
|< LIKE: <L> <I> <K> <E> >
|< LINE_INPUT: <L> <I> <N> <E> " " <I> <N> <P> <U> <T> >
|< LOCK_READ: <L> <O> <C> <K> " " <R> <E> <A> <D> >
|< LOCK_WRITE: <L> <O> <C> <K> " " <W> <R> <I> <T> <E> >
|< LOCK_READ_WRITE: <L> <O> <C> <K> " " <R> <E> <A> <D> " " <W> <R> <I> <T> <E> >
|< LSET: <L> <S> <E> <T> >
|< MACRO_IF:  "#" <I> <F> >
|< MACRO_ELSEIF:  "#" <E> <L> <S> <E> <I> <F> >
|< MACRO_ELSE:  "#" <E> <L> <S> <E> >
|< MACRO_END_IF:  "#" <E> <N> <D> " " <I> <F> >
|< ME: <M> <E> >
|< MID: <M> <I> <D> >
|< MKDIR: <M> <K> <D> <I> <R> >
|< MOD: <M> <O> <D> >
|< NAME: <N> <A> <M> <E> >
|< NEXT: <N> <E> <X> <T> >
|< NEW: <N> <E> <W> >
|< NOT: <N> <O> <T> >
|< NOTHING: <N> <O> <T> <H> <I> <N> <G> >
|< NULL: <N> <U> <L> <L> >
|< ON: <O> <N> >
|< ON_ERROR: <O> <N> " " <E> <R> <R> <O> <R> >
|< OPEN: <O> <P> <E> <N> >
|< OPTIONAL: <O> <P> <T> <I> <O> <N> <A> <L> >
|< OPTION_BASE: <O> <P> <T> <I> <O> <N> " " <B> <A> <S> <E> >
|< OPTION_EXPLICIT: <O> <P> <T> <I> <O> <N> " " <E> <X> <P> <L> <I> <C> <I> <T> >
|< OPTION_COMPARE: <O> <P> <T> <I> <O> <N> " " <C> <O> <M> <P> <A> <R> <E> >
|< OPTION_PRIVATE_MODULE: <O> <P> <T> <I> <O> <N> " " <P> <R> <I> <V> <A> <T> <E> " " <M> <O> <D> <U> <L> <E> >
|< OR: <O> <R> >
|< OUTPUT: <O> <U> <T> <P> <U> <T> >
|< PARAMARRAY: <P> <A> <R> <A> <M> <A> <R> <R> <A> <Y> >
|< PRESERVE: <P> <R> <E> <S> <E> <R> <V> <E> >
|< PRINT: <P> <R> <I> <N> <T> >
|< PRIVATE: <P> <R> <I> <V> <A> <T> <E> >
|< PROPERTY_GET: <P> <R> <O> <P> <E> <R> <T> <Y> " " <G> <E> <T> >
|< PROPERTY_LET: <P> <R> <O> <P> <E> <R> <T> <Y> " " <L> <E> <T> >
|< PROPERTY_SET: <P> <R> <O> <P> <E> <R> <T> <Y> " " <S> <E> <T> >
|< PUBLIC: <P> <U> <B> <L> <I> <C> >
|< PUT: <P> <U> <T> >
|< RANDOM: <R> <A> <N> <D> <O> <M> >
|< RANDOMIZE: <R> <A> <N> <D> <O> <M> <I> <Z> <E> >
|< RAISEEVENT: <R> <A> <I> <S> <E> <E> <V> <E> <N> <T> >
|< READ: <R> <E> <A> <D> >
|< READ_WRITE: <R> <E> <A> <D> " " <W> <R> <I> <T> <E> >
|< REDIM: <R> <E> <D> <I> <M> >
|< REM: <R> <E> <M> >
|< RESET: <R> <E> <S> <E> <T> >
|< RESUME: <R> <E> <S> <U> <M> <E> >
|< RETURN: <R> <E> <T> <U> <R> <N> >
|< RMDIR: <R> <M> <D> <I> <R> >
|< RSET: <R> <S> <E> <T> >
|< SAVEPICTURE: <S> <A> <V> <E> <P> <I> <C> <T> <U> <R> <E> >
|< SAVESETTING: <S> <A> <V> <E> <S> <E> <T> <T> <I> <N> <G> >
|< SEEK: <S> <E> <E> <K> >
|< SELECT: <S> <E> <L> <E> <C> <T> >
|< SENDKEYS: <S> <E> <N> <D> <K> <E> <Y> <S> >
|< SET: <S> <E> <T> >
|< SETATTR: <S> <E> <T> <A> <T> <T> <R> >
|< SHARED: <S> <H> <A> <R> <E> <D> >
|< SINGLE: <S> <I> <N> <G> <L> <E> >
|< SPC: <S> <P> <C> >
|< STATIC: <S> <T> <A> <T> <I> <C> >
|< STEP: <S> <T> <E> <P> >
|< STOP: <S> <T> <O> <P> >
|< STRING: <S> <T> <R> <I> <N> <G> >
|< SUB: <S> <U> <B> >
|< TAB: <T> <A> <B> >
|< TEXT: <T> <E> <X> <T> >
|< THEN: <T> <H> <E> <N> >
|< TIME: <T> <I> <M> <E> >
|< TO: <T> <O> >
|< TRUE: <T> <R> <U> <E> >
|< TYPE: <T> <Y> <P> <E> >
|< TYPEOF: <T> <Y> <P> <E> <O> <F> >
|< UNLOAD: <U> <N> <L> <O> <A> <D> >
|< UNLOCK: <U> <N> <L> <O> <C> <K> >
|< UNTIL: <U> <N> <T> <I> <L> >
|< VARIANT: <V> <A> <R> <I> <A> <N> <T> >
|< VERSION: <V> <E> <R> <S> <I> <O> <N> >
|< WEND: <W> <E> <N> <D> >
|< WHILE: <W> <H> <I> <L> <E> >
|< WIDTH: <W> <I> <D> <T> <H> >
|< WITH: <W> <I> <T> <H> >
|< WITHEVENTS: <W> <I> <T> <H> <E> <V> <E> <N> <T> <S> >
|< WRITE: <W> <R> <I> <T> <E> >
|< XOR: <X> <O> <R> >
}

/* case insensitive chars */
TOKEN :
{
< A: ["a", "A"] >
|< B: ["b", "B"] >
|< C: ["c", "C"] >
|< D: ["d", "D"] >
|< E: ["e", "E"] >
|< F: ["f", "F"] >
|< G: ["g", "G"] >
|< H: ["h", "H"] >
|< I: ["i", "I"] >
|< J: ["j", "J"] >
|< K: ["k", "K"] >
|< L: ["l", "L"] >
|< M: ["m", "M"] >
|< N: ["n", "N"] >
|< O: ["o", "O"] >
|< P: ["p", "P"] >
|< Q: ["q", "Q"] >
|< R: ["r", "R"] >
|< S: ["s", "S"] >
|< T: ["t", "T"] >
|< U: ["u", "U"] >
|< V: ["v", "V"] >
|< W: ["w", "W"] >
|< X: ["x", "X"] >
|< Y: ["y", "Y"] >
|< Z: ["z", "Z"] >
}

/* symbols */
TOKEN:
{
<AMPERSAND : "&">
|<ASSIGN : ":=">
|<DIV : ["\\", "/"]>
|<EQ : "=">
|<GEQ : ">=">
|<GT : ">">
|<LEQ : "<=">
|<LPAREN : "(">
|<LT : "<">
|<MINUS : "-">
|<MINUS_EQ : "-=">
|<MULT : "*">
|<NEQ : "<>">
|<PLUS : "+">
|<PLUS_EQ : "+=">
|<POW : "^">
|<RPAREN : ")">
|<L_SQUARE_BRACKET : "[">
|<R_SQUARE_BRACKET : "]">
}

/* basics */
SPECIAL_TOKEN:
{
<LETTER : ["a"-"z", "A"-"Z", "_"]>
|<LETTERORDIGIT : ["a"-"z", "A"-"Z", "0"-"9", "_"]>
}

/* literals */
TOKEN:
{
<STRINGLITERAL : "\"" (~["\"", "\r", "\n"] | "\"\"")* "\"">
|<DATELITERAL : "#" (~["#", "\r", "\n"])* "#">
|<COLORLITERAL : "&H" (["0"-"9", "A"-"F"])+ ("&")?>
|<INTEGERLITERAL : (<PLUS>|<MINUS>)? (["0"-"9"])+ ( ("e" | "E") (<PLUS>|<MINUS>)? (["0"-"9"]))* ("#" | "&")?>
|<DOUBLELITERAL : (<PLUS>|<MINUS>)? (["0"-"9"])* "." (["0"-"9"])+ ( ("e" | "E") (<PLUS>|<MINUS>)? (["0"-"9"])+)* ("#" | "&")?>
|<FILENUMBER : "#" (<LETTERORDIGIT>)+>
}



/* identifier */
TOKEN:
{
<IDENTIFIER : <LETTER> (<LETTERORDIGIT>)*>
}

/* whitespace, line breaks, comments... */

TOKEN:
{
<WS : ([" ", "\t"])+>
}

TOKEN:
{
<NEWLINE : (<WS>)? (("\r")? "\n" | ": ") (<WS>)?>
}

SKIP:
{
<LINE_CONTINUATION : " _" ("\r")? "\n">
}

// TODO handle comments correctly (store them and check for suppress marker)
SKIP:
{
<COMMENT : (<WS>)? ("\'" | (":")? <REM> " ") (<LINE_CONTINUATION> | ~["\n", "\r"])*>
}




/***************************************************
 * THE VISUAL BASIC 6 LANGUAGE GRAMMAR STARTS HERE *
 ***************************************************/
ASTModule Module() :
{/*@bgen(jjtree) Module */
  ASTModule jjtn000 = new ASTModule(this, JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Module */
try {
/*@egen*/
(LOOKAHEAD(2) <NEWLINE>)* (LOOKAHEAD(2) <WS>)? 
(ModuleHeader() (<NEWLINE>)+)?
(ModuleConfig())? (<NEWLINE>)*
(ModuleAttributes())? (<NEWLINE>)*
(ModuleOptions())? (<NEWLINE>)*
(ModuleBody())? (<NEWLINE>)*
(<WS>)?
<EOF>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
return jjtn000;
}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ModuleHeader() :
{/*@bgen(jjtree) ModuleHeader */
  ASTModuleHeader jjtn000 = new ASTModuleHeader(this, JJTMODULEHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleHeader */
 try {
/*@egen*/
 <VERSION> <WS> <DOUBLELITERAL> <WS> <CLASS>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ModuleConfig() :
{/*@bgen(jjtree) ModuleConfig */
  ASTModuleConfig jjtn000 = new ASTModuleConfig(this, JJTMODULECONFIG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleConfig */
        try {
/*@egen*/
	<BEGIN> (<NEWLINE>)+ 
	(AmbiguousIdentifier() (<WS>)? <EQ> (<WS>)? Literal() <NEWLINE>)+ 
	<END> (<NEWLINE>)+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ModuleAttributes() :
{/*@bgen(jjtree) ModuleAttributes */
  ASTModuleAttributes jjtn000 = new ASTModuleAttributes(this, JJTMODULEATTRIBUTES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleAttributes */
 try {
/*@egen*/
 (AttributeStmt() (<NEWLINE>)+)+/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void ModuleOptions() : 
{/*@bgen(jjtree) ModuleOptions */
  ASTModuleOptions jjtn000 = new ASTModuleOptions(this, JJTMODULEOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleOptions */
 try {
/*@egen*/
 (ModuleOption() (<NEWLINE>)+)+/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ModuleOption() : 
{/*@bgen(jjtree) ModuleOption */
  ASTModuleOption jjtn000 = new ASTModuleOption(this, JJTMODULEOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleOption */
        try {
/*@egen*/
	<OPTION_BASE> <WS> <INTEGERLITERAL> // optionBaseStmt
	| <OPTION_COMPARE> <WS> (<BINARY> | <TEXT>) // optionCompareStmt
	| <OPTION_EXPLICIT> // optionExplicitStmt
	| <OPTION_PRIVATE_MODULE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ // optionPrivateModuleStmt
}

void ModuleBody() : 
{/*@bgen(jjtree) ModuleBody */
  ASTModuleBody jjtn000 = new ASTModuleBody(this, JJTMODULEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleBody */
        try {
/*@egen*/
	ModuleBodyElement() ((<NEWLINE>)+ ModuleBodyElement())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ModuleBodyElement() :
{/*@bgen(jjtree) ModuleBodyElement */
  ASTModuleBodyElement jjtn000 = new ASTModuleBodyElement(this, JJTMODULEBODYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleBodyElement */
        try {
/*@egen*/ 
	(
	  SubStmt()
	| FunctionStmt()
	| DeclareStmt()
	| EnumerationStmt() 
	| EventStmt()
	| MacroIfThenElseStmt()
	| PropertyGetStmt() 
	| PropertySetStmt() 
	| PropertyLetStmt() 
	| TypeStmt()
	| ModuleBlock()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ModuleBlock() :
{/*@bgen(jjtree) ModuleBlock */
  ASTModuleBlock jjtn000 = new ASTModuleBlock(this, JJTMODULEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleBlock */
        try {
/*@egen*/
	Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AttributeStmt() :
{/*@bgen(jjtree) AttributeStmt */
  ASTAttributeStmt jjtn000 = new ASTAttributeStmt(this, JJTATTRIBUTESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttributeStmt */
        try {
/*@egen*/
	<ATTRIBUTE> <WS> ImplicitCallStmt_InStmt() (<WS>)? <EQ> (<WS>)? Literal() ((<WS>)? "," (<WS>)? Literal())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Block() :
{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	BlockStmt() ((<NEWLINE>)+ (<WS>)? BlockStmt())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BlockStmt() :
{/*@bgen(jjtree) BlockStmt */
  ASTBlockStmt jjtn000 = new ASTBlockStmt(this, JJTBLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BlockStmt */
        try {
/*@egen*/
	(
	AppactivateStmt()
	| AttributeStmt()
	| BeepStmt()
	| ChdirStmt()
	| ChdriveStmt()
	| CloseStmt()
	| ConstStmt()
	| DateStmt()
	| DeleteSettingStmt()
	| DeftypeStmt()
	| DoLoopStmt()
	| EndStmt()
	| EraseStmt()
	| ErrorStmt()
	| ExitStmt()
	| ExplicitCallStmt()
	| FilecopyStmt()
	| ForEachStmt()
	| ForNextStmt()
	| GetStmt()
	| GoSubStmt()
	| GoToStmt()
	| IfThenElseStmt()
	| ImplementsStmt()
	| InputStmt()
	| KillStmt()
	| LetStmt()
	| LineInputStmt()
	| LineLabel()
	| LoadStmt()
	| LockStmt()
	| LsetStmt()
	| MacroIfThenElseStmt()
	| MidStmt()
	| MkdirStmt()
	| NameStmt()
	| OnErrorStmt()
	| OnGoToStmt()
	| OnGoSubStmt()
	| OpenStmt()
	| PrintStmt()
	| PutStmt()
	| RaiseEventStmt()
	| RandomizeStmt()
	| RedimStmt()
	| ResetStmt()
	| ResumeStmt()
	| ReturnStmt()
	| RmdirStmt()
	| RsetStmt()
	| SavepictureStmt()
	| SaveSettingStmt()
	| SeekStmt()
	| SelectCaseStmt()
	| SendkeysStmt()
	| SetattrStmt()
	| SetStmt()
	| StopStmt()
	| TimeStmt()
	| UnloadStmt()
	| UnlockStmt()
	| VariableStmt()
	| WhileWendStmt()
	| WidthStmt()
	| WithStmt()
	| WriteStmt()
	| ImplicitCallStmt_InBlock()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Statements */

void AppactivateStmt() : 
{/*@bgen(jjtree) AppactivateStmt */
  ASTAppactivateStmt jjtn000 = new ASTAppactivateStmt(this, JJTAPPACTIVATESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AppactivateStmt */
try {
/*@egen*/
<APPACTIVATE> <WS> ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void BeepStmt() : 
{/*@bgen(jjtree) BeepStmt */
  ASTBeepStmt jjtn000 = new ASTBeepStmt(this, JJTBEEPSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BeepStmt */
try {
/*@egen*/
<BEEP>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ChdirStmt() : 
{/*@bgen(jjtree) ChdirStmt */
  ASTChdirStmt jjtn000 = new ASTChdirStmt(this, JJTCHDIRSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ChdirStmt */
try {
/*@egen*/
<CHDIR> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ChdriveStmt() :
{/*@bgen(jjtree) ChdriveStmt */
  ASTChdriveStmt jjtn000 = new ASTChdriveStmt(this, JJTCHDRIVESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ChdriveStmt */
try {
/*@egen*/
<CHDRIVE> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void CloseStmt() : 
{/*@bgen(jjtree) CloseStmt */
  ASTCloseStmt jjtn000 = new ASTCloseStmt(this, JJTCLOSESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CloseStmt */
try {
/*@egen*/
<CLOSE> (<WS> ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt())*)?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ConstStmt() :
{/*@bgen(jjtree) ConstStmt */
  ASTConstStmt jjtn000 = new ASTConstStmt(this, JJTCONSTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConstStmt */
 try {
/*@egen*/
 (Visibility() <WS>)? <CONST> <WS> ConstSubStmt() ((<WS>)? "," (<WS>)? ConstSubStmt())*/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ConstSubStmt() : 
{/*@bgen(jjtree) ConstSubStmt */
  ASTConstSubStmt jjtn000 = new ASTConstSubStmt(this, JJTCONSTSUBSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConstSubStmt */
try {
/*@egen*/
AmbiguousIdentifier() (TypeHint())? (<WS> AsTypeClause())? (<WS>)? <EQ> (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void DateStmt() : 
{/*@bgen(jjtree) DateStmt */
  ASTDateStmt jjtn000 = new ASTDateStmt(this, JJTDATESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DateStmt */
try {
/*@egen*/
<DATE> (<WS>)? <EQ> (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void DeclareStmt() : 
{/*@bgen(jjtree) DeclareStmt */
  ASTDeclareStmt jjtn000 = new ASTDeclareStmt(this, JJTDECLARESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeclareStmt */
try {
/*@egen*/
(Visibility() <WS>)? <DECLARE> <WS> (<FUNCTION> | <SUB>) <WS> AmbiguousIdentifier() <WS> <LIB> <WS> <STRINGLITERAL> (<WS> <ALIAS> <WS> <STRINGLITERAL>)? ((<WS>)? ArgList())? (<WS> AsTypeClause())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void DeftypeStmt() :
{/*@bgen(jjtree) DeftypeStmt */
  ASTDeftypeStmt jjtn000 = new ASTDeftypeStmt(this, JJTDEFTYPESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeftypeStmt */
        try {
/*@egen*/ 
	(
		<DEFBOOL> | <DEFBYTE> | <DEFINT> | <DEFLNG> | <DEFCUR> | 
		<DEFSNG> | <DEFDBL> | <DEFDEC> | <DEFDATE> | 
		<DEFSTR> | <DEFOBJ> | <DEFVAR>
	) <WS>
	Letterrange() ((<WS>)? "," (<WS>)? Letterrange())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DeleteSettingStmt() :
{/*@bgen(jjtree) DeleteSettingStmt */
  ASTDeleteSettingStmt jjtn000 = new ASTDeleteSettingStmt(this, JJTDELETESETTINGSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeleteSettingStmt */
try {
/*@egen*/
<DELETESETTING> <WS> ValueStmt() (<WS>)? "," (<WS>)? ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void DoLoopStmt() :
{/*@bgen(jjtree) DoLoopStmt */
  ASTDoLoopStmt jjtn000 = new ASTDoLoopStmt(this, JJTDOLOOPSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoLoopStmt */
        try {
/*@egen*/
	(
	<DO> (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)? 
	<LOOP>
	|
	<DO> <WS> (<WHILE> | <UNTIL>) <WS> ValueStmt() (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)? 
	<LOOP>
	| 
	<DO> (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+) 
	<LOOP> <WS> (<WHILE> | <UNTIL>) <WS> ValueStmt()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void EndStmt() : 
{/*@bgen(jjtree) EndStmt */
  ASTEndStmt jjtn000 = new ASTEndStmt(this, JJTENDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EndStmt */
try {
/*@egen*/
<END>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void EnumerationStmt() :
{/*@bgen(jjtree) EnumerationStmt */
  ASTEnumerationStmt jjtn000 = new ASTEnumerationStmt(this, JJTENUMERATIONSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EnumerationStmt */
        try {
/*@egen*/ 
	(Visibility() <WS>)? <ENUM> <WS> AmbiguousIdentifier() (<NEWLINE>)+ 
	(EnumerationStmt_Constant())* 
	<END_ENUM>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EnumerationStmt_Constant() : 
{/*@bgen(jjtree) EnumerationStmt_Constant */
  ASTEnumerationStmt_Constant jjtn000 = new ASTEnumerationStmt_Constant(this, JJTENUMERATIONSTMT_CONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EnumerationStmt_Constant */
try {
/*@egen*/
AmbiguousIdentifier() ((<WS>)? <EQ> (<WS>)? ValueStmt())? (<NEWLINE>)+/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void EraseStmt() :
{/*@bgen(jjtree) EraseStmt */
  ASTEraseStmt jjtn000 = new ASTEraseStmt(this, JJTERASESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EraseStmt */
try {
/*@egen*/
<ERASE> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ErrorStmt() :
{/*@bgen(jjtree) ErrorStmt */
  ASTErrorStmt jjtn000 = new ASTErrorStmt(this, JJTERRORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ErrorStmt */
try {
/*@egen*/
<ERROR> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void EventStmt() :
{/*@bgen(jjtree) EventStmt */
  ASTEventStmt jjtn000 = new ASTEventStmt(this, JJTEVENTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EventStmt */
try {
/*@egen*/
(Visibility() <WS>)? <EVENT> <WS> AmbiguousIdentifier() (<WS>)? ArgList()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ExitStmt() : 
{/*@bgen(jjtree) ExitStmt */
  ASTExitStmt jjtn000 = new ASTExitStmt(this, JJTEXITSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExitStmt */
try {
/*@egen*/
( <EXIT_DO> | <EXIT_FOR> | <EXIT_FUNCTION> | <EXIT_PROPERTY> | <EXIT_SUB> )/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void FilecopyStmt() : 
{/*@bgen(jjtree) FilecopyStmt */
  ASTFilecopyStmt jjtn000 = new ASTFilecopyStmt(this, JJTFILECOPYSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FilecopyStmt */
try {
/*@egen*/
<FILECOPY> <WS> ValueStmt() (<WS>)? "," (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ForEachStmt() :
{/*@bgen(jjtree) ForEachStmt */
  ASTForEachStmt jjtn000 = new ASTForEachStmt(this, JJTFOREACHSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForEachStmt */
        try {
/*@egen*/ 
	<FOR> <WS> <EACH> <WS> AmbiguousIdentifier() (TypeHint())? <WS> <IN> <WS> ValueStmt() (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)?
	<NEXT> (<WS> AmbiguousIdentifier())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ForNextStmt() :
{/*@bgen(jjtree) ForNextStmt */
  ASTForNextStmt jjtn000 = new ASTForNextStmt(this, JJTFORNEXTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForNextStmt */
        try {
/*@egen*/ 
	<FOR> <WS> AmbiguousIdentifier() (TypeHint())? (<WS> AsTypeClause())? (<WS>)? <EQ> (<WS>)? ValueStmt() <WS> <TO> <WS> ValueStmt() (<WS> <STEP> <WS> ValueStmt())? (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)? 
	<NEXT> (<WS> AmbiguousIdentifier())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FunctionStmt() :
{/*@bgen(jjtree) FunctionStmt */
  ASTFunctionStmt jjtn000 = new ASTFunctionStmt(this, JJTFUNCTIONSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionStmt */
        try {
/*@egen*/
	(Visibility() <WS>)? (<STATIC> <WS>)? <FUNCTION> <WS> AmbiguousIdentifier() ((<WS>)? ArgList())? (<WS> AsTypeClause())? (<NEWLINE>)+
	(Block() (<NEWLINE>)+)?
	<END_FUNCTION>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void GetStmt() : 
{/*@bgen(jjtree) GetStmt */
  ASTGetStmt jjtn000 = new ASTGetStmt(this, JJTGETSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GetStmt */
try {
/*@egen*/
<GET> <WS> ValueStmt() (<WS>)? "," (<WS>)? (ValueStmt())? (<WS>)? "," (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void GoSubStmt() : 
{/*@bgen(jjtree) GoSubStmt */
  ASTGoSubStmt jjtn000 = new ASTGoSubStmt(this, JJTGOSUBSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GoSubStmt */
try {
/*@egen*/
<GOSUB> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void GoToStmt() :
{/*@bgen(jjtree) GoToStmt */
  ASTGoToStmt jjtn000 = new ASTGoToStmt(this, JJTGOTOSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GoToStmt */
try {
/*@egen*/
<GOTO> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void IfThenElseStmt() :
{/*@bgen(jjtree) IfThenElseStmt */
  ASTIfThenElseStmt jjtn000 = new ASTIfThenElseStmt(this, JJTIFTHENELSESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfThenElseStmt */
        try {
/*@egen*/ 
	(
	<IF> <WS> IfConditionStmt() <WS> <THEN> <WS> BlockStmt() (<WS> <ELSE> <WS> BlockStmt())? // inlineIfThenElse
	| IfBlockStmt() (IfElseIfBlockStmt())* (IfElseBlockStmt())? <END_IF> // blockIfThenElse
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfBlockStmt() :
{/*@bgen(jjtree) IfBlockStmt */
  ASTIfBlockStmt jjtn000 = new ASTIfBlockStmt(this, JJTIFBLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfBlockStmt */
        try {
/*@egen*/ 
	<IF> <WS> IfConditionStmt() <WS> <THEN> (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfConditionStmt() :
{/*@bgen(jjtree) IfConditionStmt */
  ASTIfConditionStmt jjtn000 = new ASTIfConditionStmt(this, JJTIFCONDITIONSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfConditionStmt */
        try {
/*@egen*/
	ValueStmt()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfElseIfBlockStmt() :
{/*@bgen(jjtree) IfElseIfBlockStmt */
  ASTIfElseIfBlockStmt jjtn000 = new ASTIfElseIfBlockStmt(this, JJTIFELSEIFBLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfElseIfBlockStmt */
        try {
/*@egen*/ 
	<ELSEIF> <WS> IfConditionStmt() <WS> <THEN> (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfElseBlockStmt() :
{/*@bgen(jjtree) IfElseBlockStmt */
  ASTIfElseBlockStmt jjtn000 = new ASTIfElseBlockStmt(this, JJTIFELSEBLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfElseBlockStmt */
        try {
/*@egen*/ 
	<ELSE> (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ImplementsStmt() : 
{/*@bgen(jjtree) ImplementsStmt */
  ASTImplementsStmt jjtn000 = new ASTImplementsStmt(this, JJTIMPLEMENTSSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImplementsStmt */
try {
/*@egen*/
<IMPLEMENTS> <WS> AmbiguousIdentifier()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void InputStmt() : 
{/*@bgen(jjtree) InputStmt */
  ASTInputStmt jjtn000 = new ASTInputStmt(this, JJTINPUTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InputStmt */
try {
/*@egen*/
<INPUT> <WS> ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt())+/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void KillStmt() : 
{/*@bgen(jjtree) KillStmt */
  ASTKillStmt jjtn000 = new ASTKillStmt(this, JJTKILLSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) KillStmt */
try {
/*@egen*/
<KILL> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void LetStmt() :
{/*@bgen(jjtree) LetStmt */
  ASTLetStmt jjtn000 = new ASTLetStmt(this, JJTLETSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LetStmt */
try {
/*@egen*/
(<LET> <WS>)? ImplicitCallStmt_InStmt() (<WS>)? (<EQ> | <PLUS_EQ> | <MINUS_EQ>) (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void LineInputStmt() : 
{/*@bgen(jjtree) LineInputStmt */
  ASTLineInputStmt jjtn000 = new ASTLineInputStmt(this, JJTLINEINPUTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LineInputStmt */
try {
/*@egen*/
<LINE_INPUT> <WS> ValueStmt() (<WS>)? "," (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void LoadStmt() :
{/*@bgen(jjtree) LoadStmt */
  ASTLoadStmt jjtn000 = new ASTLoadStmt(this, JJTLOADSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LoadStmt */
try {
/*@egen*/
<LOAD> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void LockStmt() :
{/*@bgen(jjtree) LockStmt */
  ASTLockStmt jjtn000 = new ASTLockStmt(this, JJTLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LockStmt */
try {
/*@egen*/
<LOCK> <WS> ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt() (<WS> <TO> <WS> ValueStmt())?)?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void LsetStmt() :
{/*@bgen(jjtree) LsetStmt */
  ASTLsetStmt jjtn000 = new ASTLsetStmt(this, JJTLSETSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LsetStmt */
try {
/*@egen*/
<LSET> <WS> ImplicitCallStmt_InStmt() (<WS>)? <EQ> (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void MacroIfThenElseStmt() : 
{/*@bgen(jjtree) MacroIfThenElseStmt */
  ASTMacroIfThenElseStmt jjtn000 = new ASTMacroIfThenElseStmt(this, JJTMACROIFTHENELSESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MacroIfThenElseStmt */
try {
/*@egen*/
MacroIfBlockStmt() (MacroElseIfBlockStmt())* (MacroElseBlockStmt())? <MACRO_END_IF>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void MacroIfBlockStmt() :
{/*@bgen(jjtree) MacroIfBlockStmt */
  ASTMacroIfBlockStmt jjtn000 = new ASTMacroIfBlockStmt(this, JJTMACROIFBLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MacroIfBlockStmt */
        try {
/*@egen*/ 
	<MACRO_IF> <WS> IfConditionStmt() <WS> <THEN> (<NEWLINE>)+ 
	(ModuleBody() (<NEWLINE>)+)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MacroElseIfBlockStmt() :
{/*@bgen(jjtree) MacroElseIfBlockStmt */
  ASTMacroElseIfBlockStmt jjtn000 = new ASTMacroElseIfBlockStmt(this, JJTMACROELSEIFBLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MacroElseIfBlockStmt */
        try {
/*@egen*/ 
	<MACRO_ELSEIF> <WS> IfConditionStmt() <WS> <THEN> (<NEWLINE>)+ 
	(ModuleBody() (<NEWLINE>)+)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MacroElseBlockStmt() :
{/*@bgen(jjtree) MacroElseBlockStmt */
  ASTMacroElseBlockStmt jjtn000 = new ASTMacroElseBlockStmt(this, JJTMACROELSEBLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MacroElseBlockStmt */
        try {
/*@egen*/
	<MACRO_ELSE> (<NEWLINE>)+ 
	(ModuleBody() (<NEWLINE>)+)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MidStmt() : 
{/*@bgen(jjtree) MidStmt */
  ASTMidStmt jjtn000 = new ASTMidStmt(this, JJTMIDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MidStmt */
try {
/*@egen*/
<MID> (<WS>)? <LPAREN> (<WS>)? ArgsCall() (<WS>)? <RPAREN>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void MkdirStmt() :
{/*@bgen(jjtree) MkdirStmt */
  ASTMkdirStmt jjtn000 = new ASTMkdirStmt(this, JJTMKDIRSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MkdirStmt */
try {
/*@egen*/
<MKDIR> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void NameStmt() : 
{/*@bgen(jjtree) NameStmt */
  ASTNameStmt jjtn000 = new ASTNameStmt(this, JJTNAMESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NameStmt */
try {
/*@egen*/
<NAME> <WS> ValueStmt() <WS> <AS> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void OnErrorStmt() : 
{/*@bgen(jjtree) OnErrorStmt */
  ASTOnErrorStmt jjtn000 = new ASTOnErrorStmt(this, JJTONERRORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OnErrorStmt */
try {
/*@egen*/
<ON_ERROR> <WS> (<GOTO> <WS> ValueStmt() | <RESUME> <WS> <NEXT>)/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void OnGoToStmt() : 
{/*@bgen(jjtree) OnGoToStmt */
  ASTOnGoToStmt jjtn000 = new ASTOnGoToStmt(this, JJTONGOTOSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OnGoToStmt */
try {
/*@egen*/
<ON> <WS> ValueStmt() <WS> <GOTO> <WS> ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt())*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void OnGoSubStmt() : 
{/*@bgen(jjtree) OnGoSubStmt */
  ASTOnGoSubStmt jjtn000 = new ASTOnGoSubStmt(this, JJTONGOSUBSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OnGoSubStmt */
try {
/*@egen*/
<ON> <WS> ValueStmt() <WS> <GOSUB> <WS> ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt())*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void OpenStmt() :
{/*@bgen(jjtree) OpenStmt */
  ASTOpenStmt jjtn000 = new ASTOpenStmt(this, JJTOPENSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OpenStmt */
        try {
/*@egen*/ 
	<OPEN> <WS> ValueStmt() <WS> <FOR> <WS> (<APPEND> | <BINARY> | <INPUT> | <OUTPUT> | <RANDOM>) 
	(<WS> <ACCESS> <WS> (<READ> | <WRITE> | <READ_WRITE>))?
	(<WS> (<SHARED> | <LOCK_READ> | <LOCK_WRITE> | <LOCK_READ_WRITE>))?
	<WS> <AS> <WS> ValueStmt()
	(<WS> <LEN> (<WS>)? <EQ> (<WS>)? ValueStmt())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OutputList() :
{/*@bgen(jjtree) OutputList */
  ASTOutputList jjtn000 = new ASTOutputList(this, JJTOUTPUTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OutputList */
        try {
/*@egen*/
	(
	OutputList_Expression() ((<WS>)? (";" | ",") (<WS>)? (OutputList_Expression())?)*
	| (OutputList_Expression())? ((<WS>)? (";" | ",") (<WS>)? (OutputList_Expression())?)+
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OutputList_Expression() :
{/*@bgen(jjtree) OutputList_Expression */
  ASTOutputList_Expression jjtn000 = new ASTOutputList_Expression(this, JJTOUTPUTLIST_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OutputList_Expression */
        try {
/*@egen*/ 
	(
	ValueStmt()
	| (<SPC> | <TAB>) ((<WS>)? <LPAREN> (<WS>)? ArgsCall() (<WS>)? <RPAREN>)?
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void PrintStmt() :
{/*@bgen(jjtree) PrintStmt */
  ASTPrintStmt jjtn000 = new ASTPrintStmt(this, JJTPRINTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrintStmt */
try {
/*@egen*/
<PRINT> <WS> ValueStmt() (<WS>)? "," ((<WS>)? OutputList())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void PropertyGetStmt() :
{/*@bgen(jjtree) PropertyGetStmt */
  ASTPropertyGetStmt jjtn000 = new ASTPropertyGetStmt(this, JJTPROPERTYGETSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PropertyGetStmt */
        try {
/*@egen*/ 
	(Visibility() <WS>)? (<STATIC> <WS>)? <PROPERTY_GET> <WS> AmbiguousIdentifier() ((<WS>)? ArgList())? (<WS> AsTypeClause())? (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)? 
	<END_PROPERTY>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PropertySetStmt() :
{/*@bgen(jjtree) PropertySetStmt */
  ASTPropertySetStmt jjtn000 = new ASTPropertySetStmt(this, JJTPROPERTYSETSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PropertySetStmt */
        try {
/*@egen*/ 
	(Visibility() <WS>)? (<STATIC> <WS>)? <PROPERTY_SET> <WS> AmbiguousIdentifier() ((<WS>)? ArgList())? (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)? 
	<END_PROPERTY>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PropertyLetStmt() : 
{/*@bgen(jjtree) PropertyLetStmt */
  ASTPropertyLetStmt jjtn000 = new ASTPropertyLetStmt(this, JJTPROPERTYLETSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PropertyLetStmt */
        try {
/*@egen*/
	(Visibility() <WS>)? (<STATIC> <WS>)? <PROPERTY_LET> <WS> AmbiguousIdentifier() ((<WS>)? ArgList())? (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)? 
	<END_PROPERTY>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PutStmt() : 
{/*@bgen(jjtree) PutStmt */
  ASTPutStmt jjtn000 = new ASTPutStmt(this, JJTPUTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PutStmt */
try {
/*@egen*/
<PUT> <WS> ValueStmt() (<WS>)? "," (<WS>)? (ValueStmt())? (<WS>)? "," (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void RaiseEventStmt() :
{/*@bgen(jjtree) RaiseEventStmt */
  ASTRaiseEventStmt jjtn000 = new ASTRaiseEventStmt(this, JJTRAISEEVENTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RaiseEventStmt */
try {
/*@egen*/
<RAISEEVENT> <WS> AmbiguousIdentifier() ((<WS>)? <LPAREN> (<WS>)? (ArgsCall() (<WS>)?)? <RPAREN>)?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void RandomizeStmt() : 
{/*@bgen(jjtree) RandomizeStmt */
  ASTRandomizeStmt jjtn000 = new ASTRandomizeStmt(this, JJTRANDOMIZESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RandomizeStmt */
try {
/*@egen*/
<RANDOMIZE> (<WS> ValueStmt())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void RedimStmt() : 
{/*@bgen(jjtree) RedimStmt */
  ASTRedimStmt jjtn000 = new ASTRedimStmt(this, JJTREDIMSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RedimStmt */
try {
/*@egen*/
<REDIM> <WS> (<PRESERVE> <WS>)? RedimSubStmt() ((<WS>)? "," (<WS>)? RedimSubStmt())*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void RedimSubStmt() : 
{/*@bgen(jjtree) RedimSubStmt */
  ASTRedimSubStmt jjtn000 = new ASTRedimSubStmt(this, JJTREDIMSUBSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RedimSubStmt */
try {
/*@egen*/
ImplicitCallStmt_InStmt() (<WS>)? <LPAREN> (<WS>)? Subscripts() (<WS>)? <RPAREN> (<WS> AsTypeClause())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ResetStmt() : 
{/*@bgen(jjtree) ResetStmt */
  ASTResetStmt jjtn000 = new ASTResetStmt(this, JJTRESETSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ResetStmt */
try {
/*@egen*/
<RESET>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ResumeStmt() : 
{/*@bgen(jjtree) ResumeStmt */
  ASTResumeStmt jjtn000 = new ASTResumeStmt(this, JJTRESUMESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ResumeStmt */
try {
/*@egen*/
<RESUME> (<WS> (<NEXT> | AmbiguousIdentifier()))?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ReturnStmt() : 
{/*@bgen(jjtree) ReturnStmt */
  ASTReturnStmt jjtn000 = new ASTReturnStmt(this, JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStmt */
try {
/*@egen*/
<RETURN>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void RmdirStmt() : 
{/*@bgen(jjtree) RmdirStmt */
  ASTRmdirStmt jjtn000 = new ASTRmdirStmt(this, JJTRMDIRSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RmdirStmt */
try {
/*@egen*/
<RMDIR> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void RsetStmt() : 
{/*@bgen(jjtree) RsetStmt */
  ASTRsetStmt jjtn000 = new ASTRsetStmt(this, JJTRSETSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RsetStmt */
try {
/*@egen*/
<RSET> <WS> ImplicitCallStmt_InStmt() (<WS>)? <EQ> (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void SavepictureStmt() :
{/*@bgen(jjtree) SavepictureStmt */
  ASTSavepictureStmt jjtn000 = new ASTSavepictureStmt(this, JJTSAVEPICTURESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SavepictureStmt */
try {
/*@egen*/
<SAVEPICTURE> <WS> ValueStmt() (<WS>)? "," (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void SaveSettingStmt() : 
{/*@bgen(jjtree) SaveSettingStmt */
  ASTSaveSettingStmt jjtn000 = new ASTSaveSettingStmt(this, JJTSAVESETTINGSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SaveSettingStmt */
try {
/*@egen*/
<SAVESETTING> <WS> ValueStmt() (<WS>)? "," (<WS>)? ValueStmt() (<WS>)? "," (<WS>)? ValueStmt() (<WS>)? "," (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void SeekStmt() : 
{/*@bgen(jjtree) SeekStmt */
  ASTSeekStmt jjtn000 = new ASTSeekStmt(this, JJTSEEKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SeekStmt */
try {
/*@egen*/
<SEEK> <WS> ValueStmt() (<WS>)? "," (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void SelectCaseStmt() :
{/*@bgen(jjtree) SelectCaseStmt */
  ASTSelectCaseStmt jjtn000 = new ASTSelectCaseStmt(this, JJTSELECTCASESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectCaseStmt */
        try {
/*@egen*/ 
	<SELECT> <WS> <CASE> <WS> ValueStmt() (<NEWLINE>)+ 
	(SC_Case())* 
	(SC_CaseElse())?
	(<WS>)? <END_SELECT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SC_Case() :
{/*@bgen(jjtree) SC_Case */
  ASTSC_Case jjtn000 = new ASTSC_Case(this, JJTSC_CASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SC_Case */
        try {
/*@egen*/ 
	<CASE> <WS> SC_Cond() (<WS>)? ((":")? (<NEWLINE>)* | (<NEWLINE>)+)  
	(Block() (<NEWLINE>)+)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SC_Cond() :
{/*@bgen(jjtree) SC_Cond */
  ASTSC_Cond jjtn000 = new ASTSC_Cond(this, JJTSC_COND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SC_Cond */
        try {
/*@egen*/
	( 
	<IS> (<WS>)? ComparisonOperator() (<WS>)? ValueStmt() // caseCondIs
	| ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt())* // caseCondValue
	| <INTEGERLITERAL> <WS> <TO> <WS> ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt())* // caseCondTo
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SC_CaseElse() :
{/*@bgen(jjtree) SC_CaseElse */
  ASTSC_CaseElse jjtn000 = new ASTSC_CaseElse(this, JJTSC_CASEELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SC_CaseElse */
        try {
/*@egen*/ 
	<CASE> <WS> <ELSE> (<WS>)? ((":")? (<NEWLINE>)* | (<NEWLINE>)+)  
	(Block() (<NEWLINE>)+)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SendkeysStmt() : 
{/*@bgen(jjtree) SendkeysStmt */
  ASTSendkeysStmt jjtn000 = new ASTSendkeysStmt(this, JJTSENDKEYSSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SendkeysStmt */
try {
/*@egen*/
<SENDKEYS> <WS> ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void SetattrStmt() : 
{/*@bgen(jjtree) SetattrStmt */
  ASTSetattrStmt jjtn000 = new ASTSetattrStmt(this, JJTSETATTRSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetattrStmt */
try {
/*@egen*/
<SETATTR> <WS> ValueStmt() (<WS>)? "," (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void SetStmt() : 
{/*@bgen(jjtree) SetStmt */
  ASTSetStmt jjtn000 = new ASTSetStmt(this, JJTSETSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetStmt */
try {
/*@egen*/
<SET> <WS> ImplicitCallStmt_InStmt() (<WS>)? <EQ> (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void StopStmt() : 
{/*@bgen(jjtree) StopStmt */
  ASTStopStmt jjtn000 = new ASTStopStmt(this, JJTSTOPSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StopStmt */
try {
/*@egen*/
<STOP>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void SubStmt() :
{/*@bgen(jjtree) SubStmt */
  ASTSubStmt jjtn000 = new ASTSubStmt(this, JJTSUBSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SubStmt */
        try {
/*@egen*/ 
	(Visibility() <WS>)? (<STATIC> <WS>)? <SUB> <WS> AmbiguousIdentifier() ((<WS>)? ArgList())? (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)? 
	<END_SUB>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void TimeStmt() : 
{/*@bgen(jjtree) TimeStmt */
  ASTTimeStmt jjtn000 = new ASTTimeStmt(this, JJTTIMESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TimeStmt */
try {
/*@egen*/
<TIME> (<WS>)? <EQ> (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void TypeStmt() : 
{/*@bgen(jjtree) TypeStmt */
  ASTTypeStmt jjtn000 = new ASTTypeStmt(this, JJTTYPESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeStmt */
        try {
/*@egen*/
	(Visibility() <WS>)? <TYPE> <WS> AmbiguousIdentifier() (<NEWLINE>)+ 
	(TypeStmt_Element())*
	<END_TYPE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TypeStmt_Element() : 
{/*@bgen(jjtree) TypeStmt_Element */
  ASTTypeStmt_Element jjtn000 = new ASTTypeStmt_Element(this, JJTTYPESTMT_ELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeStmt_Element */
try {
/*@egen*/
AmbiguousIdentifier() ((<WS>)? <LPAREN> ((<WS>)? Subscripts())? (<WS>)? <RPAREN>)? (<WS> AsTypeClause())? (<NEWLINE>)+/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void TypeOfStmt() : 
{/*@bgen(jjtree) TypeOfStmt */
  ASTTypeOfStmt jjtn000 = new ASTTypeOfStmt(this, JJTTYPEOFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeOfStmt */
try {
/*@egen*/
<TYPEOF> <WS> ValueStmt() (<WS> <IS> <WS> Type())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void UnloadStmt() : 
{/*@bgen(jjtree) UnloadStmt */
  ASTUnloadStmt jjtn000 = new ASTUnloadStmt(this, JJTUNLOADSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnloadStmt */
try {
/*@egen*/
<UNLOAD> <WS> ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void UnlockStmt() : 
{/*@bgen(jjtree) UnlockStmt */
  ASTUnlockStmt jjtn000 = new ASTUnlockStmt(this, JJTUNLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnlockStmt */
try {
/*@egen*/
<UNLOCK> <WS> ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt() (<WS> <TO> <WS> ValueStmt())?)?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ValueStmt() :
{/*@bgen(jjtree) ValueStmt */
  ASTValueStmt jjtn000 = new ASTValueStmt(this, JJTVALUESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValueStmt */
        try {
/*@egen*/ 
	(/*@bgen(jjtree) LiteralStmt */
        {
          ASTLiteralStmt jjtn001 = new ASTLiteralStmt(this, JJTLITERALSTMT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	Literal()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/             
	| MidStmt()
	| <NEW> <WS>/*@bgen(jjtree) NewStmt */
                     {
                       ASTNewStmt jjtn002 = new ASTNewStmt(this, JJTNEWSTMT);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*/ ValueStmt()/*@bgen(jjtree)*/
                     } catch (Throwable jjte002) {
                       if (jjtc002) {
                         jjtree.clearNodeScope(jjtn002);
                         jjtc002 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte002 instanceof RuntimeException) {
                         throw (RuntimeException)jjte002;
                       }
                       if (jjte002 instanceof ParseException) {
                         throw (ParseException)jjte002;
                       }
                       throw (Error)jjte002;
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
                     }
/*@egen*/         
	| ImplicitCallStmt_InStmt()
	| TypeOfStmt()
	| <LPAREN> (<WS>)? ValueStmt() ((<WS>)? "," (<WS>)? ValueStmt())*/*@bgen(jjtree) StructStmt */
                                                                          {
                                                                            ASTStructStmt jjtn003 = new ASTStructStmt(this, JJTSTRUCTSTMT);
                                                                            boolean jjtc003 = true;
                                                                            jjtree.openNodeScope(jjtn003);
                                                                          }
                                                                          try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                                                                          } finally {
                                                                            if (jjtc003) {
                                                                              jjtree.closeNodeScope(jjtn003, true);
                                                                            }
                                                                          }
/*@egen*/            
	| ImplicitCallStmt_InStmt() (<WS>)? <ASSIGN> (<WS>)?/*@bgen(jjtree) AssignStmt */
                                                             {
                                                               ASTAssignStmt jjtn004 = new ASTAssignStmt(this, JJTASSIGNSTMT);
                                                               boolean jjtc004 = true;
                                                               jjtree.openNodeScope(jjtn004);
                                                             }
                                                             try {
/*@egen*/ ValueStmt()/*@bgen(jjtree)*/
                                                             } catch (Throwable jjte004) {
                                                               if (jjtc004) {
                                                                 jjtree.clearNodeScope(jjtn004);
                                                                 jjtc004 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte004 instanceof RuntimeException) {
                                                                 throw (RuntimeException)jjte004;
                                                               }
                                                               if (jjte004 instanceof ParseException) {
                                                                 throw (ParseException)jjte004;
                                                               }
                                                               throw (Error)jjte004;
                                                             } finally {
                                                               if (jjtc004) {
                                                                 jjtree.closeNodeScope(jjtn004, true);
                                                               }
                                                             }
/*@egen*/            
	| <PLUS> (<WS>)?/*@bgen(jjtree) PlusStmt */
                         {
                           ASTPlusStmt jjtn005 = new ASTPlusStmt(this, JJTPLUSSTMT);
                           boolean jjtc005 = true;
                           jjtree.openNodeScope(jjtn005);
                         }
                         try {
/*@egen*/ ValueStmt()/*@bgen(jjtree)*/
                         } catch (Throwable jjte005) {
                           if (jjtc005) {
                             jjtree.clearNodeScope(jjtn005);
                             jjtc005 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte005 instanceof RuntimeException) {
                             throw (RuntimeException)jjte005;
                           }
                           if (jjte005 instanceof ParseException) {
                             throw (ParseException)jjte005;
                           }
                           throw (Error)jjte005;
                         } finally {
                           if (jjtc005) {
                             jjtree.closeNodeScope(jjtn005, true);
                           }
                         }
/*@egen*/          
	| <ADDRESSOF> <WS>/*@bgen(jjtree) AddressOfStmt */
                           {
                             ASTAddressOfStmt jjtn006 = new ASTAddressOfStmt(this, JJTADDRESSOFSTMT);
                             boolean jjtc006 = true;
                             jjtree.openNodeScope(jjtn006);
                           }
                           try {
/*@egen*/ ValueStmt()/*@bgen(jjtree)*/
                           } catch (Throwable jjte006) {
                             if (jjtc006) {
                               jjtree.clearNodeScope(jjtn006);
                               jjtc006 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte006 instanceof RuntimeException) {
                               throw (RuntimeException)jjte006;
                             }
                             if (jjte006 instanceof ParseException) {
                               throw (ParseException)jjte006;
                             }
                             throw (Error)jjte006;
                           } finally {
                             if (jjtc006) {
                               jjtree.closeNodeScope(jjtn006, true);
                             }
                           }
/*@egen*/               
	| <MINUS> (<WS>)?/*@bgen(jjtree) NegationStmt */
                          {
                            ASTNegationStmt jjtn007 = new ASTNegationStmt(this, JJTNEGATIONSTMT);
                            boolean jjtc007 = true;
                            jjtree.openNodeScope(jjtn007);
                          }
                          try {
/*@egen*/ ValueStmt()/*@bgen(jjtree)*/
                          } catch (Throwable jjte007) {
                            if (jjtc007) {
                              jjtree.clearNodeScope(jjtn007);
                              jjtc007 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte007 instanceof RuntimeException) {
                              throw (RuntimeException)jjte007;
                            }
                            if (jjte007 instanceof ParseException) {
                              throw (ParseException)jjte007;
                            }
                            throw (Error)jjte007;
                          } finally {
                            if (jjtc007) {
                              jjtree.closeNodeScope(jjtn007, true);
                            }
                          }
/*@egen*/              
	| <NOT> <WS>/*@bgen(jjtree) NotStmt */
                     {
                       ASTNotStmt jjtn008 = new ASTNotStmt(this, JJTNOTSTMT);
                       boolean jjtc008 = true;
                       jjtree.openNodeScope(jjtn008);
                     }
                     try {
/*@egen*/ ValueStmt()/*@bgen(jjtree)*/
                     } catch (Throwable jjte008) {
                       if (jjtc008) {
                         jjtree.clearNodeScope(jjtn008);
                         jjtc008 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte008 instanceof RuntimeException) {
                         throw (RuntimeException)jjte008;
                       }
                       if (jjte008 instanceof ParseException) {
                         throw (ParseException)jjte008;
                       }
                       throw (Error)jjte008;
                     } finally {
                       if (jjtc008) {
                         jjtree.closeNodeScope(jjtn008, true);
                       }
                     }
/*@egen*/         
	)
	
	(ValueStmtOperator() ValueStmt())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ValueStmtOperator() :
{/*@bgen(jjtree) ValueStmtOperator */
  ASTValueStmtOperator jjtn000 = new ASTValueStmtOperator(this, JJTVALUESTMTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValueStmtOperator */
        try {
/*@egen*/
	(
	  (<WS>)? <PLUS> (<WS>)?
	| <WS> <AMPERSAND> <WS>
	| <WS> <AND> <WS> 
	| (<WS>)? <LT> (<WS>)? 
	| (<WS>)? <LEQ> (<WS>)? 
	| (<WS>)? <GT> (<WS>)? 
	| (<WS>)? <GEQ> (<WS>)? 
	| (<WS>)? <EQ> (<WS>)? 
	| (<WS>)? <NEQ> (<WS>)? 
	| (<WS>)? <DIV> (<WS>)? 
	| <WS> <EQV> <WS> 
	| <WS> <IMP> <WS> 
	| <WS> <IS> <WS> 
	| <WS> <LIKE> <WS> 
	| (<WS>)? <MINUS> (<WS>)? 
	| (<WS>)? <MOD> (<WS>)? 
	| (<WS>)? <MULT> (<WS>)? 
	| (<WS>)? <OR> (<WS>)? 
	| (<WS>)? <POW> (<WS>)? 
	| (<WS>)? <XOR> (<WS>)? 
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariableStmt() :
{/*@bgen(jjtree) VariableStmt */
  ASTVariableStmt jjtn000 = new ASTVariableStmt(this, JJTVARIABLESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableStmt */
try {
/*@egen*/
(<DIM> | <STATIC> | Visibility()) <WS> (<WITHEVENTS> <WS>)? VariableListStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void VariableListStmt() : 
{/*@bgen(jjtree) VariableListStmt */
  ASTVariableListStmt jjtn000 = new ASTVariableListStmt(this, JJTVARIABLELISTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableListStmt */
try {
/*@egen*/
VariableSubStmt() ((<WS>)? "," (<WS>)? VariableSubStmt())*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void VariableSubStmt() : 
{/*@bgen(jjtree) VariableSubStmt */
  ASTVariableSubStmt jjtn000 = new ASTVariableSubStmt(this, JJTVARIABLESUBSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableSubStmt */
try {
/*@egen*/
AmbiguousIdentifier() ((<WS>)? <LPAREN> (<WS>)? (Subscripts() (<WS>)?)? <RPAREN> (<WS>)?)? (TypeHint())? (<WS> AsTypeClause())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void WhileWendStmt() :
{/*@bgen(jjtree) WhileWendStmt */
  ASTWhileWendStmt jjtn000 = new ASTWhileWendStmt(this, JJTWHILEWENDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileWendStmt */
        try {
/*@egen*/ 
	<WHILE> <WS> ValueStmt() (<NEWLINE>)+ 
	(Block() <NEWLINE>)* 
	<WEND>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WidthStmt() : 
{/*@bgen(jjtree) WidthStmt */
  ASTWidthStmt jjtn000 = new ASTWidthStmt(this, JJTWIDTHSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WidthStmt */
try {
/*@egen*/
<WIDTH> <WS> ValueStmt() (<WS>)? "," (<WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void WithStmt() :
{/*@bgen(jjtree) WithStmt */
  ASTWithStmt jjtn000 = new ASTWithStmt(this, JJTWITHSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WithStmt */
        try {
/*@egen*/ 
	<WITH> <WS> ImplicitCallStmt_InStmt() (<NEWLINE>)+ 
	(Block() (<NEWLINE>)+)? 
	<END_WITH>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WriteStmt() : 
{/*@bgen(jjtree) WriteStmt */
  ASTWriteStmt jjtn000 = new ASTWriteStmt(this, JJTWRITESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WriteStmt */
try {
/*@egen*/
<WRITE> <WS> ValueStmt() (<WS>)? "," ((<WS>)? OutputList())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


/* complex call statements --------------------------------- */

void ExplicitCallStmt() :
{/*@bgen(jjtree) ExplicitCallStmt */
  ASTExplicitCallStmt jjtn000 = new ASTExplicitCallStmt(this, JJTEXPLICITCALLSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExplicitCallStmt */
        try {
/*@egen*/
	( 
	ECS_ProcedureCall() 
	| ECS_MemberProcedureCall()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ECS_ProcedureCall() : 
{/*@bgen(jjtree) ECS_ProcedureCall */
  ASTECS_ProcedureCall jjtn000 = new ASTECS_ProcedureCall(this, JJTECS_PROCEDURECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ECS_ProcedureCall */
try {
/*@egen*/
<CALL> <WS> AmbiguousIdentifier() (TypeHint())? ((<WS>)? <LPAREN> (<WS>)? (ArgsCall() (<WS>)?)? <RPAREN>)?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ECS_MemberProcedureCall() : 
{/*@bgen(jjtree) ECS_MemberProcedureCall */
  ASTECS_MemberProcedureCall jjtn000 = new ASTECS_MemberProcedureCall(this, JJTECS_MEMBERPROCEDURECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ECS_MemberProcedureCall */
try {
/*@egen*/
<CALL> <WS> (VariableCallStmt())? (MemberPropertyCallStmt())* "." AmbiguousIdentifier() (TypeHint())? ((<WS>)? <LPAREN> (<WS>)? (ArgsCall() (<WS>)?)? <RPAREN>)?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ImplicitCallStmt_InBlock() :
{/*@bgen(jjtree) ImplicitCallStmt_InBlock */
  ASTImplicitCallStmt_InBlock jjtn000 = new ASTImplicitCallStmt_InBlock(this, JJTIMPLICITCALLSTMT_INBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImplicitCallStmt_InBlock */
        try {
/*@egen*/
	(
	ICS_B_SubCall()
	| ICS_B_FunctionCall()
	| ICS_B_MemberSubCall()
	| ICS_B_MemberFunctionCall()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// certainIdentifier instead of AmbiguousIdentifier() for preventing ambiguity with statement keywords 
void ICS_B_SubCall() : 
{/*@bgen(jjtree) ICS_B_SubCall */
  ASTICS_B_SubCall jjtn000 = new ASTICS_B_SubCall(this, JJTICS_B_SUBCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ICS_B_SubCall */
try {
/*@egen*/
CertainIdentifier() (<WS> ArgsCall())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ICS_B_FunctionCall() : 
{/*@bgen(jjtree) ICS_B_FunctionCall */
  ASTICS_B_FunctionCall jjtn000 = new ASTICS_B_FunctionCall(this, JJTICS_B_FUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ICS_B_FunctionCall */
try {
/*@egen*/
FunctionOrArrayCallStmt() (DictionaryCallStmt())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ICS_B_MemberSubCall() : 
{/*@bgen(jjtree) ICS_B_MemberSubCall */
  ASTICS_B_MemberSubCall jjtn000 = new ASTICS_B_MemberSubCall(this, JJTICS_B_MEMBERSUBCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ICS_B_MemberSubCall */
try {
/*@egen*/
(ImplicitCallStmt_InStmt())* MemberSubCallStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ICS_B_MemberFunctionCall() : 
{/*@bgen(jjtree) ICS_B_MemberFunctionCall */
  ASTICS_B_MemberFunctionCall jjtn000 = new ASTICS_B_MemberFunctionCall(this, JJTICS_B_MEMBERFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ICS_B_MemberFunctionCall */
try {
/*@egen*/
(ImplicitCallStmt_InStmt())* MemberFunctionOrArrayCallStmt() (DictionaryCallStmt())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ImplicitCallStmt_InStmt() :
{/*@bgen(jjtree) ImplicitCallStmt_InStmt */
  ASTImplicitCallStmt_InStmt jjtn000 = new ASTImplicitCallStmt_InStmt(this, JJTIMPLICITCALLSTMT_INSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImplicitCallStmt_InStmt */
        try {
/*@egen*/
	(
	ICS_S_VariableCall()
	| ICS_S_FunctionOrArrayCall()
	| ICS_S_DictionaryCall()
	| ICS_S_MembersCall()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ICS_S_VariableCall() : 
{/*@bgen(jjtree) ICS_S_VariableCall */
  ASTICS_S_VariableCall jjtn000 = new ASTICS_S_VariableCall(this, JJTICS_S_VARIABLECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ICS_S_VariableCall */
try {
/*@egen*/
VariableCallStmt() (DictionaryCallStmt())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ICS_S_FunctionOrArrayCall() : 
{/*@bgen(jjtree) ICS_S_FunctionOrArrayCall */
  ASTICS_S_FunctionOrArrayCall jjtn000 = new ASTICS_S_FunctionOrArrayCall(this, JJTICS_S_FUNCTIONORARRAYCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ICS_S_FunctionOrArrayCall */
try {
/*@egen*/
FunctionOrArrayCallStmt() (DictionaryCallStmt())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ICS_S_DictionaryCall() : 
{/*@bgen(jjtree) ICS_S_DictionaryCall */
  ASTICS_S_DictionaryCall jjtn000 = new ASTICS_S_DictionaryCall(this, JJTICS_S_DICTIONARYCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ICS_S_DictionaryCall */
try {
/*@egen*/
DictionaryCallStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ICS_S_MembersCall() : 
{/*@bgen(jjtree) ICS_S_MembersCall */
  ASTICS_S_MembersCall jjtn000 = new ASTICS_S_MembersCall(this, JJTICS_S_MEMBERSCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ICS_S_MembersCall */
try {
/*@egen*/
(VariableCallStmt() | FunctionOrArrayCallStmt())? (MemberCall_Value())+ (DictionaryCallStmt())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


// member call statements ----------------------------------

void MemberPropertyCallStmt() : 
{/*@bgen(jjtree) MemberPropertyCallStmt */
  ASTMemberPropertyCallStmt jjtn000 = new ASTMemberPropertyCallStmt(this, JJTMEMBERPROPERTYCALLSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MemberPropertyCallStmt */
try {
/*@egen*/
"." AmbiguousIdentifier()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void MemberFunctionOrArrayCallStmt() : 
{/*@bgen(jjtree) MemberFunctionOrArrayCallStmt */
  ASTMemberFunctionOrArrayCallStmt jjtn000 = new ASTMemberFunctionOrArrayCallStmt(this, JJTMEMBERFUNCTIONORARRAYCALLSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MemberFunctionOrArrayCallStmt */
try {
/*@egen*/
"." FunctionOrArrayCallStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void MemberSubCallStmt() : 
{/*@bgen(jjtree) MemberSubCallStmt */
  ASTMemberSubCallStmt jjtn000 = new ASTMemberSubCallStmt(this, JJTMEMBERSUBCALLSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MemberSubCallStmt */
try {
/*@egen*/
"." AmbiguousIdentifier() (<WS> ArgsCall())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void MemberCall_Value() : 
{/*@bgen(jjtree) MemberCall_Value */
  ASTMemberCall_Value jjtn000 = new ASTMemberCall_Value(this, JJTMEMBERCALL_VALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MemberCall_Value */
try {
/*@egen*/
(MemberPropertyCallStmt() | MemberFunctionOrArrayCallStmt())/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


// atomic call statements ----------------------------------

void VariableCallStmt() : 
{/*@bgen(jjtree) VariableCallStmt */
  ASTVariableCallStmt jjtn000 = new ASTVariableCallStmt(this, JJTVARIABLECALLSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableCallStmt */
try {
/*@egen*/
AmbiguousIdentifier() (TypeHint())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void DictionaryCallStmt() : 
{/*@bgen(jjtree) DictionaryCallStmt */
  ASTDictionaryCallStmt jjtn000 = new ASTDictionaryCallStmt(this, JJTDICTIONARYCALLSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DictionaryCallStmt */
try {
/*@egen*/
"!" AmbiguousIdentifier() (TypeHint())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void FunctionOrArrayCallStmt() : 
{/*@bgen(jjtree) FunctionOrArrayCallStmt */
  ASTFunctionOrArrayCallStmt jjtn000 = new ASTFunctionOrArrayCallStmt(this, JJTFUNCTIONORARRAYCALLSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionOrArrayCallStmt */
try {
/*@egen*/
(AmbiguousIdentifier() | BaseType()) (TypeHint())? (<WS>)? <LPAREN> (<WS>)? (ArgsCall() (<WS>)?)? <RPAREN>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ArgsCall() : 
{/*@bgen(jjtree) ArgsCall */
  ASTArgsCall jjtn000 = new ASTArgsCall(this, JJTARGSCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgsCall */
try {
/*@egen*/
((ArgCall())? (<WS>)? ("," | ";") (<WS>)?)* ArgCall() ((<WS>)? ("," | ";") (<WS>)? (ArgCall())?)*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ArgCall() : 
{/*@bgen(jjtree) ArgCall */
  ASTArgCall jjtn000 = new ASTArgCall(this, JJTARGCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgCall */
try {
/*@egen*/
((<BYVAL> | <BYREF> | <PARAMARRAY>) <WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


// atomic rules for statements

void ArgList() : 
{/*@bgen(jjtree) ArgList */
  ASTArgList jjtn000 = new ASTArgList(this, JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
try {
/*@egen*/
<LPAREN> ((<WS>)? Arg() ((<WS>)? "," (<WS>)? Arg())*)? (<WS>)? <RPAREN>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Arg() : 
{/*@bgen(jjtree) Arg */
  ASTArg jjtn000 = new ASTArg(this, JJTARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arg */
try {
/*@egen*/
(<OPTIONAL> <WS>)? ((<BYVAL> | <BYREF>) <WS>)? (<PARAMARRAY> <WS>)? AmbiguousIdentifier() ((<WS>)? <LPAREN> (<WS>)? <RPAREN>)? (<WS> AsTypeClause())? ((<WS>)? ArgDefaultValue())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ArgDefaultValue() : 
{/*@bgen(jjtree) ArgDefaultValue */
  ASTArgDefaultValue jjtn000 = new ASTArgDefaultValue(this, JJTARGDEFAULTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgDefaultValue */
try {
/*@egen*/
<EQ> (<WS>)? (Literal() | AmbiguousIdentifier())/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Subscripts() : 
{/*@bgen(jjtree) Subscripts */
  ASTSubscripts jjtn000 = new ASTSubscripts(this, JJTSUBSCRIPTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Subscripts */
try {
/*@egen*/
Subscript() ((<WS>)? "," (<WS>)? Subscript())*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Subscript() : 
{/*@bgen(jjtree) Subscript */
  ASTSubscript jjtn000 = new ASTSubscript(this, JJTSUBSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Subscript */
try {
/*@egen*/
(ValueStmt() <WS> <TO> <WS>)? ValueStmt()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}


// atomic rules ----------------------------------

void AmbiguousIdentifier() :
{/*@bgen(jjtree) AmbiguousIdentifier */
  ASTAmbiguousIdentifier jjtn000 = new ASTAmbiguousIdentifier(this, JJTAMBIGUOUSIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AmbiguousIdentifier */
        try {
/*@egen*/
	( 
	(<IDENTIFIER> | AmbiguousKeyword())+
	| <L_SQUARE_BRACKET> (<IDENTIFIER> | AmbiguousKeyword())+ <R_SQUARE_BRACKET>
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AsTypeClause() : 
{/*@bgen(jjtree) AsTypeClause */
  ASTAsTypeClause jjtn000 = new ASTAsTypeClause(this, JJTASTYPECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AsTypeClause */
try {
/*@egen*/
<AS> <WS> (<NEW> <WS>)? Type() (<WS> FieldLength())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void BaseType() : 
{/*@bgen(jjtree) BaseType */
  ASTBaseType jjtn000 = new ASTBaseType(this, JJTBASETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BaseType */
try {
/*@egen*/
<BOOLEAN> | <BYTE> | <COLLECTION> | <DATE> | <DOUBLE> | <INTEGER> | <LONG> | <SINGLE> | <STRING> | <VARIANT>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void CertainIdentifier() :
{/*@bgen(jjtree) CertainIdentifier */
  ASTCertainIdentifier jjtn000 = new ASTCertainIdentifier(this, JJTCERTAINIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CertainIdentifier */
        try {
/*@egen*/
	( 
	<IDENTIFIER> (AmbiguousKeyword() | <IDENTIFIER>)*
	| AmbiguousKeyword() (AmbiguousKeyword() | <IDENTIFIER>)+
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ComparisonOperator() : 
{/*@bgen(jjtree) ComparisonOperator */
  ASTComparisonOperator jjtn000 = new ASTComparisonOperator(this, JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComparisonOperator */
try {
/*@egen*/
<LT> | <LEQ> | <GT> | <GEQ> | <EQ> | <NEQ> | <IS> | <LIKE>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ComplexType() : 
{/*@bgen(jjtree) ComplexType */
  ASTComplexType jjtn000 = new ASTComplexType(this, JJTCOMPLEXTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComplexType */
try {
/*@egen*/
AmbiguousIdentifier() ("." AmbiguousIdentifier())*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void FieldLength() :
{/*@bgen(jjtree) FieldLength */
  ASTFieldLength jjtn000 = new ASTFieldLength(this, JJTFIELDLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FieldLength */
try {
/*@egen*/
<MULT> (<WS>)? (<INTEGERLITERAL> | AmbiguousIdentifier())/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Letterrange() : 
{/*@bgen(jjtree) Letterrange */
  ASTLetterrange jjtn000 = new ASTLetterrange(this, JJTLETTERRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Letterrange */
try {
/*@egen*/
CertainIdentifier() ((<WS>)? <MINUS> (<WS>)? CertainIdentifier())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void LineLabel() : 
{/*@bgen(jjtree) LineLabel */
  ASTLineLabel jjtn000 = new ASTLineLabel(this, JJTLINELABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LineLabel */
try {
/*@egen*/
AmbiguousIdentifier() ":"/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Literal() : 
{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
try {
/*@egen*/
( <COLORLITERAL> | <DATELITERAL> | <DOUBLELITERAL> | <FILENUMBER> | <INTEGERLITERAL> | <STRINGLITERAL> | <TRUE> | <FALSE> | <NOTHING> | <NULL> )/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Type() : 
{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(this, JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
try {
/*@egen*/
(BaseType() | ComplexType()) ((<WS>)? <LPAREN> (<WS>)? <RPAREN>)?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void TypeHint() : 
{/*@bgen(jjtree) TypeHint */
  ASTTypeHint jjtn000 = new ASTTypeHint(this, JJTTYPEHINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeHint */
try {
/*@egen*/
( "&" | "%" | "#" | "!" | "@" | "$" )/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Visibility() : 
{/*@bgen(jjtree) Visibility */
  ASTVisibility jjtn000 = new ASTVisibility(this, JJTVISIBILITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Visibility */
try {
/*@egen*/
<PRIVATE> | <PUBLIC> | <FRIEND> | <GLOBAL>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

// ambiguous keywords
void AmbiguousKeyword() :
{/*@bgen(jjtree) AmbiguousKeyword */
  ASTAmbiguousKeyword jjtn000 = new ASTAmbiguousKeyword(this, JJTAMBIGUOUSKEYWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AmbiguousKeyword */
        try {
/*@egen*/ 
	<ACCESS> | <ADDRESSOF> | <ALIAS> | <AND> | <ATTRIBUTE> | <APPACTIVATE> | <APPEND> | <AS> |
	<BEEP> | <BEGIN> | <BINARY> | <BOOLEAN> | <BYVAL> | <BYREF> | <BYTE> | 
	<CALL> | <CASE> | <CLASS> | <CLOSE> | <CHDIR> | <CHDRIVE> | <COLLECTION> | <CONST> | 
	<DATE> | <DECLARE> | <DEFBOOL> | <DEFBYTE> | <DEFCUR> | <DEFDBL> | <DEFDATE> | <DEFDEC> | <DEFINT> | <DEFLNG> | <DEFOBJ> | <DEFSNG> | <DEFSTR> | <DEFVAR> | <DELETESETTING> | <DIM> | <DO> | <DOUBLE> | 
	<EACH> | <ELSE> | <ELSEIF> | <END> | <ENUM> | <EQV> | <ERASE> | <ERROR> | <EVENT> | 
	<FALSE> | <FILECOPY> | <FRIEND> | <FOR> | <FUNCTION> | 
	<GET> | <GLOBAL> | <GOSUB> | <GOTO> | 
	<IF> | <IMP> | <IMPLEMENTS> | <IN> | <INPUT> | <IS> | <INTEGER> |
	<KILL> | 
	<LOAD> | <LOCK> | <LONG> | <LOOP> | <LEN> | <LET> | <LIB> | <LIKE> | <LSET> |
	<ME> | <MID> | <MKDIR> | <MOD> | 
	<NAME> | <NEXT> | <NEW> | <NOT> | <NOTHING> | <NULL> | 
	<ON> | <OPEN> | <OPTIONAL> | <OR> | <OUTPUT> | 
	<PARAMARRAY> | <PRESERVE> | <PRINT> | <PRIVATE> | <PUBLIC> | <PUT> |
	<RANDOM> | <RANDOMIZE> | <RAISEEVENT> | <READ> | <REDIM> | <REM> | <RESET> | <RESUME> | <RETURN> | <RMDIR> | <RSET> |
	<SAVEPICTURE> | <SAVESETTING> | <SEEK> | <SELECT> | <SENDKEYS> | <SET> | <SETATTR> | <SHARED> | <SINGLE> | <SPC> | <STATIC> | <STEP> | <STOP> | <STRING> | <SUB> | 
	<TAB> | <TEXT> | <THEN> | <TIME> | <TO> | <TRUE> | <TYPE> | <TYPEOF> | 
	<UNLOAD> | <UNLOCK> | <UNTIL> | 
	<VARIANT> | <VERSION> | 
	<WEND> | <WHILE> | <WIDTH> | <WITH> | <WITHEVENTS> | <WRITE> |
	<XOR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
